<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/aop
                           http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context-3.0.xsd
                           http://www.springframework.org/schema/tx
                           http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
                           http://www.springframework.org/schema/jdbc
                           http://www.springframework.org/schema/jdbc/spring-jdbc.xsd">

    <bean id="dataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
        <property name="driverClass" value="com.mysql.cj.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost/testdb"/>
        <property name="username" value="spring"/>
        <property name="password" value="book"/>
    </bean>

    <!--p.483 6-53 ProxyFactoryBean을 제거한 후의 빈 설정-->
    <bean id="userService" class="com.springbook.user.service.UserServiceImpl">
        <property name="userDao" ref="userDao"/>
        <property name="mailSender" ref="mailSender"/>
    </bean>

    <!--스태틱 멤버 클래스는 $로 지정한다.-->
    <bean id="testUserService" class="com.springbook.user.service.UserServiceImpl$TestUserService"
        parent="userService"/>

    <bean id="userDao" class="com.springbook.user.dao.UserDaoJdbc">
        <property name="dataSource" ref="dataSource"/>
        <property name="sqlService" ref="sqlService"/>
    </bean>

    <bean id="sqlService" class="com.springbook.user.sqlservice.OxmSqlService">
        <property name="unmarshaller" ref="unmarshaller"/>
        <!--디폴트로 준비된 HashMapSqlRegistry 대신 외부에 따로 정의한 SQL 레지스트리를 사용하도록 프로퍼티를 명시적으로 지정한다.-->
        <property name="sqlRegistry" ref="sqlRegistry"/>
    </bean>

    <bean id="sqlRegistry" class="com.springbook.user.sqlservice.updatable.EmbeddedDbSqlRegistry">
        <property name="dataSource" ref="embeddedDatabase"/>
    </bean>

    <bean id="unmarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
        <property name="contextPath" value="com.springbook.user.sqlservice.jaxb"/> <!--이 디렉토리의 sqlmap.xml 사용-->
    </bean>

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <bean id="mailSender" class="com.springbook.user.service.DummyMailSender">
        <property name="host" value="mail.server.com"/>
    </bean>


    <!--후처리기 등록 / cf. 스프링 부트에서는 별도로 등록하지 않아도 이미 존재한다...-->
    <tx:annotation-driven/>
    <!--@Transactional이 붙은 타입과 메서드에 트랜잭션 부가기능을 담은 프록시를 추가하도록 만들어주는 후처리기 등록-->

    <!--p.634 HSQL 내장형 DB 설정, p.640 자세한 코드-->
    <jdbc:embedded-database id="embeddedDatabase" type="HSQL">
        <jdbc:script location="classpath:com/springbook/user/sqlservice/updatable/sqlRegistrySchema.sql"/>
    </jdbc:embedded-database>
</beans>
